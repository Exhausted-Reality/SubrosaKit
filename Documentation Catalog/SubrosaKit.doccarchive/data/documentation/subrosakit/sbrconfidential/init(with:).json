{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":" "},{"kind":"internalParam","text":"encryptionType"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.ddec.subrosakit\/documentation\/SubrosaKit\/SBRConfidential\/EncryptionType","preciseIdentifier":"s:10SubrosaKit15SBRConfidentialC14EncryptionTypeO","text":"EncryptionType"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"encryptionType","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"List of available encryption types."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The list of available methods of the SBRConfidential class is not available for all encryption types."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples:"}]},{"type":"codeListing","syntax":null,"code":["let algorithm = SBRConfidential(with: .sha2(hashValue: .bits256))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of using AES encryption:"}]},{"type":"codeListing","syntax":null,"code":["let aes = SBRConfidential(with: .aes(keySize: .bits256))","","let plainText = \"Hello, world!\"","","let key = aes.generateKey()","","let encryptedData = aes.encrypt(propertySet: .init(text: plainText, key: key))!","let decryptedText = aes.decrypt(propertySet: .init(data: encryptedData, key: key))!"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of using EdDSA encryption:"}]},{"type":"codeListing","syntax":null,"code":["let eddsa = SBRConfidential(with: .eddsa(hashValue: .bits512, keySize: .bits256))","","let dogPlainText = \"woof-woof-woof\"","let catPlainText = \"meow-meow-meow\"","","let catKeyPair = eddsa.generateKeyPair()!","let dogKeyPair = eddsa.generateKeyPair()!","","let salt = eddsa.generateSalt()!","","\/\/ Cat's symmetric key","let catSymmetricKey = eddsa.generateKey(","    with: .init(","        keyPair: .init(","            privateKey: catKeyPair.privateKey,","            publicKey: dogKeyPair.publicKey!","        ),","        salt: salt","    )",")","","\/\/ Dog's symmetric key","let dogSymmetricKey = eddsa.generateKey(","    with: .init(","        keyPair: .init(","            privateKey: dogKeyPair.privateKey,","            publicKey: catKeyPair.publicKey!","        ),","        salt: salt","    )",")","","print(\"Is cat & dog has the same keys? - \\((catSymmetricKey == dogSymmetricKey ? \"Yes\" : \"No\"))\")","\/\/ Prints \"Yes\"","","let catEncryptedData = eddsa.encrypt(propertySet: .init(text: catPlainText, key: catSymmetricKey))!","let dogEncryptedData = eddsa.encrypt(propertySet: .init(text: dogPlainText, key: dogSymmetricKey))!","","let catDecryptedText = eddsa.decrypt(propertySet: .init(data: dogEncryptedData, key: catSymmetricKey))!","let dogDecryptedText = eddsa.decrypt(propertySet: .init(data: catEncryptedData, key: dogSymmetricKey))!"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of using SHA-2 encryption:"}]},{"type":"codeListing","syntax":null,"code":["let sha2 = SBRConfidential(with: .sha2(hashValue: .bits512))","","let plainText = \"Hello, world!\"","","let encryptedData = sha2.encrypt(propertySet: .init(text: plainText))!"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Dmitry Novikov Â· Exhausted Reality"}]}],"type":"aside","name":"Authors"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"None"}]}],"type":"aside","name":"Bug"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/subrosakit\/sbrconfidential\/init(with:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.ddec.subrosakit\/documentation\/SubrosaKit\/SBRConfidential\/init(with:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An initializer that allows you to set the type of encryption from the available list, as well as the key size and\/or hash value."}],"kind":"symbol","metadata":{"role":"symbol","title":"init(with:)","roleHeading":"Initializer","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EncryptionType","preciseIdentifier":"s:10SubrosaKit15SBRConfidentialC14EncryptionTypeO"},{"kind":"text","text":")"}],"symbolKind":"init","externalID":"s:10SubrosaKit15SBRConfidentialC4withA2C14EncryptionTypeO_tcfc","modules":[{"name":"SubrosaKit"}],"platforms":[{"beta":false,"unavailable":false,"name":"iOS","introducedAt":"16.0","deprecated":false},{"beta":false,"unavailable":false,"name":"macOS","introducedAt":"13.0","deprecated":false}]},"hierarchy":{"paths":[["doc:\/\/com.ddec.subrosakit\/documentation\/SubrosaKit","doc:\/\/com.ddec.subrosakit\/documentation\/SubrosaKit\/SBRConfidential"]]},"references":{"doc://com.ddec.subrosakit/documentation/SubrosaKit/SBRConfidential/EncryptionType":{"role":"symbol","title":"SBRConfidential.EncryptionType","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"EncryptionType"}],"abstract":[{"type":"text","text":"An enumeration that is a list of available encryption algorithms."}],"identifier":"doc:\/\/com.ddec.subrosakit\/documentation\/SubrosaKit\/SBRConfidential\/EncryptionType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EncryptionType"}],"url":"\/documentation\/subrosakit\/sbrconfidential\/encryptiontype"},"doc://com.ddec.subrosakit/documentation/SubrosaKit/SBRConfidential/init(with:)":{"role":"symbol","title":"init(with:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EncryptionType","preciseIdentifier":"s:10SubrosaKit15SBRConfidentialC14EncryptionTypeO"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"An initializer that allows you to set the type of encryption from the available list, as well as the key size and\/or hash value."}],"identifier":"doc:\/\/com.ddec.subrosakit\/documentation\/SubrosaKit\/SBRConfidential\/init(with:)","kind":"symbol","type":"topic","url":"\/documentation\/subrosakit\/sbrconfidential\/init(with:)"},"doc://com.ddec.subrosakit/documentation/SubrosaKit":{"role":"collection","title":"SubrosaKit","abstract":[{"type":"text","text":"SubrosaKit is an Xcode Fat Framework designed for sharing with the Reality Fusion FX game engine."}],"identifier":"doc:\/\/com.ddec.subrosakit\/documentation\/SubrosaKit","kind":"symbol","type":"topic","url":"\/documentation\/subrosakit"},"doc://com.ddec.subrosakit/documentation/SubrosaKit/SBRConfidential":{"role":"symbol","title":"SBRConfidential","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SBRConfidential"}],"abstract":[{"type":"text","text":"A class that implements a set of functionality for encryption and decryption with an available set of encryption algorithms."}],"identifier":"doc:\/\/com.ddec.subrosakit\/documentation\/SubrosaKit\/SBRConfidential","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SBRConfidential"}],"url":"\/documentation\/subrosakit\/sbrconfidential"}}}